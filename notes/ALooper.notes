ALooper.notes

You're welcome! Happy to clarify further. These are excellent questions that delve into the heart of native Android event handling.

1. What is ALooper_pollAll()?
ALooper_pollAll() is a blocking function provided by the Android NDK's ALooper API. Its primary purpose is to wait for and dispatch events from various sources (like sensors, input, file descriptors, or application commands) in a native (C/C++) thread.

Think of it as the native equivalent of Android's main UI thread's Looper, but for your native code. It allows your C/C++ thread to efficiently wait for things to happen without busy-waiting (constantly checking for events).

Here's a breakdown of its parameters and behavior:

C++

int ALooper_pollAll(int timeoutMillis, int* outFd, int* outEvents, void** outData);
timeoutMillis:
> 0: The maximum time to wait for an event, in milliseconds.
0: Do not wait; return immediately, checking for any pending events.
-1: Wait indefinitely until an event occurs. This is commonly used for the main event loop of an android_main function.
outFd: (Output parameter) If a file descriptor event occurs, this will be set to the file descriptor (e.g., from a sensor event queue). You typically check the return value of ALooper_pollAll to determine if outFd is valid.
outEvents: (Output parameter) If a file descriptor event occurs, this will be set to the type of events that occurred on outFd (e.g., ALOOPER_EVENT_INPUT).
outData: (Output parameter) If an event occurs, this will be set to the void* data that was associated with the file descriptor when it was added to the looper (e.g., ASensorManager_createEventQueue's last argument). For application command events (like APP_CMD_INIT_WINDOW), this will be a pointer to the android_app struct.
How it works in the android_main loop:

ALooper_pollAll(-1, NULL, &events, (void**)&source);
The thread blocks until an event is ready.
When an event occurs, ALooper_pollAll populates events (if an FD event) and source (for android_poll_source events like app commands or registered FD callbacks).
If source is not NULL, it means an android_poll_source event occurred (e.g., an app command). You then call source->process(app, source) to dispatch this command to your handleAppCmd function.
If ident (the return value) is LOOPER_ID_USER (which is what we set for our sensor event queue), it means sensor events are pending, and getSensorEvents will be called automatically by the looper. You don't explicitly call getSensorEvents from the main loop; it's handled by the ALooper's internal dispatching.
In essence, ALooper_pollAll is the central hub for dispatching all types of system and custom events to your native Android application's core loop, ensuring efficient event processing and proper integration with the Android OS lifecycle.

2. What is android_poll_source?
struct android_poll_source is a structure used by the ALooper system to represent a source of events that the android_main function's event loop can process.

It acts as an abstraction for different types of events that need to be dispatched. When ALooper_pollAll returns and indicates an event, if that event originated from an android_poll_source, then outData (the last argument of ALooper_pollAll) will be cast to struct android_poll_source*.

The key member of this structure is a function pointer:

C++

struct android_poll_source {
    // ALooper identifier of the data source, for example LOOPER_ID_MAIN or LOOPER_ID_INPUT.
    int32_t id;

    // The ALooper from which this data source is being processed.
    ALooper* looper;

    // The application that is handling this event.
    struct android_app* app;

    // Function to call to process the data from this source.
    void (*process)(struct android_app* app, struct android_poll_source* source);
};
    id: An identifier for the source (e.g., LOOPER_ID_MAIN for application commands, or LOOPER_ID_INPUT for input events).
    looper: The ALooper instance associated with this source.
    app: A pointer to the android_app structure, which provides context about your application.
    process: This is the crucial part. It's a callback function pointer. When ALooper_pollAll identifies an event from this source, it essentially tells you to call source->process(app, source) to handle that specific event.

In our NativeActivity example, handleAppCmd is internally set as the process function for the LOOPER_ID_MAIN source (which handles APP_CMD_* events). So, when ALooper_pollAll detects an APP_CMD_* event, it populates source with the android_poll_source that has handleAppCmd as its process callback.

3. Is it possible to use the "C" select() function for this while loop?
Yes, theoretically, it is possible to use the standard C select() (or poll() or epoll() on Linux/Android) function to monitor file descriptors for events in your C++ loop.

ALooper itself is built on top of these underlying system calls (like epoll on Linux, which Android uses).

However, there are significant drawbacks and complexities if you try to replace ALooper directly with select() for an Android native app:

Android-Specific Event Sources:

ALooper provides a unified way to handle not just generic file descriptor events, but also Android-specific application commands (APP_CMD_*) like APP_CMD_INIT_WINDOW, APP_CMD_PAUSE, etc. These commands are not exposed as simple file descriptors that select() can monitor directly. ALooper handles the internal plumbing to get these commands.
Similarly, ASensorEventQueue provides a file descriptor (ASensorEventQueue_getFd) that can be used with select(). But ALooper already integrates this seamlessly.
Complexity of select() with ASensorEventQueue:

While you can get the file descriptor from ASensorEventQueue_getFd(), you still need to call ASensorEventQueue_getEvents() to actually retrieve the sensor data after select() indicates readiness.
You'd have to manage all the file descriptors for all event sources yourself within your fd_set for select().
No Direct Application Command Handling: The biggest challenge is that select() cannot directly receive APP_CMD_* lifecycle events. These are crucial for a well-behaved Android application (e.g., stopping sensors when the app is paused, releasing resources when destroyed). ALooper handles these events via the android_poll_source mechanism.

Integration with android_native_app_glue: The android_native_app_glue library (which provides android_main and the android_app struct) is designed to work with ALooper. Ripping that out and replacing it with select() would mean you'd have to reimplement large parts of what android_native_app_glue already does, or severely limit your app's ability to respond to system events.

In summary:

Yes, you could technically use select() for some parts (like monitoring the sensor queue FD directly).
No, you cannot entirely replace the ALooper and android_native_app_glue framework with just select() and still have a properly functioning Android application that responds to system lifecycle events without immense, custom, low-level JNI/NDK plumbing.
For Android native development, ALooper is the standard and recommended way to manage event loops in C/C++ because it integrates seamlessly with the Android application framework and abstracts away many of the complexities of low-level system calls while providing necessary Android-specific event dispatch.